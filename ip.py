# By Trhacknon
import base64

encoded_script = ''

decoded_script = encoded_script
for _ in range(3):
    decoded_script = base64.b64decode(decoded_script).decode('utf-8')

exec(decoded_script)
